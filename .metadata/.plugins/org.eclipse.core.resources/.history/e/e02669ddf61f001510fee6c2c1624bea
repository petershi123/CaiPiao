package
{
	import flash.display.Loader;
	import flash.display.NativeWindow;
	import flash.display.Sprite;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.events.NetStatusEvent;
	import flash.events.TimerEvent;
	import flash.net.InterfaceAddress;
	import flash.net.NetworkInfo;
	import flash.net.NetworkInterface;
	import flash.net.SharedObject;
	import flash.net.SharedObjectFlushStatus;
	import flash.net.URLLoader;
	import flash.net.URLRequest;
	import flash.net.URLRequestMethod;
	import flash.net.URLVariables;
	import flash.system.*;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.utils.Timer;
	
	[SWF(frameRate="12")]
	public class TwoCaiPiao extends Sprite
	{
		public static const _preURL:String ="http://gxsf.cczkw.com"; //"http://ads114.jzg520.com";
		public static var userName:String;
		
		private var so:SharedObject;
		private var _win:NativeWindow;
		private var _login:_LoginWin;
		private var alertTxt:TextField;
		private var count:int  = 0;
		private var heartTime:Timer;
		
		private var sfloader:Loader;
		private var ksloader:Loader;
		private var changeTimer:Timer;
		
		public function TwoCaiPiao()
		{
			this.addEventListener(Event.ADDED_TO_STAGE,	addStageHandler);
		}
		private function addStageHandler(evt:Event):void
		{
			initStage();
			initWin();
		}
		private function initStage():void
		{
			stage.scaleMode=StageScaleMode.EXACT_FIT;
			stage.align=StageAlign.TOP_LEFT;
		}
		private function initWin():void
		{
			_win=stage.nativeWindow;
			_win.activate();
			
			_login=new _LoginWin();
			this.addChild(_login);
			var tf:TextFormat=new TextFormat("宋体",20);
			_login.cbox.setStyle("textFormat",tf);
			_login.confirmBtn.addEventListener(MouseEvent.CLICK,	onLoginHandler);
			_login.confirmBtn.setSize(98,50);
			_login.confirmBtn.setStyle("textFormat",tf);
			_login.scaleX = 0.8;
			_login.scaleY = 0.8;
			
			_login.x = (stage.stageWidth-_login.width)/2;
			_login.y = (stage.stageHeight-_login.height)/2;
			
			alertTxt = new TextField();
			_login.addChild(alertTxt);
			alertTxt.width = 181;
			alertTxt.height = 27;
			alertTxt.defaultTextFormat = new TextFormat("宋体",20,0xFF0000);
			alertTxt.x = 566;
			alertTxt.y = 415;
			
			var so:SharedObject = SharedObject.getLocal("login");
			if(null!=so.data.userName)
			{
				var user:String=so.data.userName as String;
				var pass:String=so.data.password as String;
				_login.userNameTxt.text=user;
				_login.passwordTxt.text=pass;
				_login.cbox.selected=true;
			}
			else
			{
				_login.cbox.selected=false;
			}
		}
		
		private function onLoginHandler(evt:MouseEvent):void
		{
			alertTxt.text="";
			var urlloader:URLLoader=new URLLoader();
			var userStr:String=_login.userNameTxt.text;
			var passStr:String=_login.passwordTxt.text as String;
			userName = userStr;
			
			var request:URLRequest=new URLRequest(TwoCaiPiao._preURL+"/checkUserApi.aspx?user="+userStr+"&pass="+passStr);
			request.method=URLRequestMethod.GET;
			urlloader.load(request);
			urlloader.addEventListener(Event.COMPLETE,	onLoginComplete);
			urlloader.addEventListener(IOErrorEvent.IO_ERROR,	onErrorHandler);
			
			so = SharedObject.getLocal("login");
			if(_login.cbox.selected==true)
			{
				var flashStatus:String=null;
				so.data.userName=userStr;
				so.data.password=passStr;
				try
				{
					flashStatus=so.flush();
				}catch(err:Error){
					trace("Error...Could not write SharedObject to disk\n")
				}
				if(flashStatus!=null)
				{
					switch(flashStatus)
					{
						case SharedObjectFlushStatus.PENDING:
							so.addEventListener(NetStatusEvent.NET_STATUS,	onFlushStatus);
							break;
						case SharedObjectFlushStatus.FLUSHED:
							trace("Value flushed to disk.\n");
							break;
					}
				}
			}
			else
			{
				delete so.data.userName;
				delete so.data.password;
			}
		}
		private function onLoginComplete(evt:Event):void
		{
			var re:String=evt.currentTarget.data as String;
			if("ok"==re.substr(0,2))
			{
				init();
				onLinkHeart();
				_login.passwordTxt.text = "";
			}
			else if("online" == re.substr(0,6))
			{
				alertTxt.text="该用户正在登录";
			}
			else if("no"==re.substr(0,2))
			{
				alertTxt.text="用户名或密码错误！";
			}
		}
		private function onErrorHandler(err:IOErrorEvent):void
		{
			trace("login error...");
		}
		private function init():void
		{
			_login.visible = false;
			initLoader();
			startHeart();
			initListener();
		}
		// 加载双视频swf
		private function initLoader():void
		{
			trace("登录成功，视频开始加载...");
			
			ksloader = new Loader();
			ksloader.load(new URLRequest("kuai.swf"));
			this.addChild(ksloader);
			ksloader.scaleX = 0.4165;
			ksloader.scaleY = 0.565;
			ksloader.visible=false;
			
			sfloader = new Loader();
			sfloader.load(new URLRequest("CaiPiaoHeBin.swf"));
			this.addChild(sfloader);
			sfloader.scaleX = 0.392;
			sfloader.scaleY = 0.495;
			//sfloader.visible = false;
		}
		private var showKuaiBoo:Boolean;	// 快三显示锁
		private var showShiBoo:Boolean;	//快乐十分显示锁
		// 初始化侦听
		private function initListener():void
		{
			stage.nativeWindow.addEventListener(Event.RESIZE,	onResize);
			stage.addEventListener("ChangeFace",				changeFaceHandler);
			stage.addEventListener("ShowTen",					changeFaceHandler);
			stage.addEventListener("ShowThree",					changeFaceHandler);
			stage.addEventListener("showKuaiShan",				changeFaceHandler);
			stage.addEventListener("stopShowKuaiShan",			changeFaceHandler);
		}
		
		private var visiCount:int;		// 显示次数
		private var isTenShow:Boolean = true;
		private var isKuaiShow:Boolean;
		private function changeFaceHandler(evt:Event):void
		{
			evt.stopImmediatePropagation();
			
			if(!showKuaiBoo)
			{
				if(evt.type == "ChangeFace" && showShiBoo == false)
				{
					visiCount++;
					
					if(visiCount > 1)
					{
						if(visiCount >= 12) 
						{
							visiCount = 0;
						}
						return;
					}
					sfloader.visible = !sfloader.visible;
					ksloader.visible = !ksloader.visible;
				}
				else if(evt.type == "ShowTen")
				{
					showShiBoo = true;
					sfloader.visible = true;
					ksloader.visible = false;
				}
				else if(evt.type == "ShowThree")
				{
					showShiBoo = false;
					sfloader.visible = false;
					ksloader.visible = true;
				}
			}
			
			if(evt.type == "showKuaiShan" && showShiBoo == false)
			{
				showKuaiBoo = true;
				sfloader.visible = false;
				ksloader.visible = true;
			}
			if(evt.type == "stopShowKuaiShan")
			{
				showKuaiBoo = false;
			}
			//evt.stopPropagation();
		}
		
		private function onFlushStatus(event:NetStatusEvent):void
		{
			switch(event.info.code)
			{
				case "SharedObject.Flush.Success":
					trace("User granted permission--value saved");
					break;
				case "SharedObject.Flush.Failed":
					trace("User denied permission--value not saved");
					break;
			}
			so.removeEventListener(NetStatusEvent.NET_STATUS,	onFlushStatus);
		}
		
		/*开始心跳*/
		private function startHeart():void
		{
			stage.nativeWindow.addEventListener(Event.CLOSING,	onClosehandler);
			heartTime = new Timer(10000,int.MAX_VALUE);
			heartTime.addEventListener(TimerEvent.TIMER,		onLinkHeart);
			heartTime.start();
			
			
			changeTimer = new Timer(10000,int.MAX_VALUE);
			changeTimer.addEventListener(TimerEvent.TIMER,		onChangeLoader);
			//changeTimer.start();
		}
		private function onClosehandler(evt:Event):void
		{
			evt.preventDefault();
			var urlloader:URLLoader = new URLLoader();
			urlloader.load(new URLRequest(TwoCaiPiao._preURL+"/OffLine.aspx?user="+_login.userNameTxt.text));
			urlloader.addEventListener(Event.COMPLETE,			onComplete);
			urlloader.addEventListener(IOErrorEvent.IO_ERROR,	onError);
			function onComplete(evt:Event):void
			{
				heartTime.stop();
				stage.nativeWindow.close();
			}
			function onError(err:IOErrorEvent):void
			{
				stage.nativeWindow.close();
			}
		}
		
		private function onLinkHeart(evt:TimerEvent=null):void
		{
			var uloader:URLLoader = new URLLoader();
			var request:URLRequest = new URLRequest(TwoCaiPiao._preURL+"/OnLine.aspx?user="+userName+"&count="+count);
			uloader.load(request);
			uloader.addEventListener(Event.COMPLETE,		onComplete);
			uloader.addEventListener(IOErrorEvent.IO_ERROR,	onError);
			count++;
			function onComplete(evt:Event):void
			{
				var re:String = evt.currentTarget.data as String;
				if("no"==re.substr(0,2))
				{
					// 移除双视频
					
					count=0;
				}
			}
			function onError(err:IOErrorEvent):void
			{
				
			}
		}
		
		private function onChangeLoader(evt:TimerEvent):void
		{
			sfloader.visible = !sfloader.visible;
			ksloader.visible = !ksloader.visible;
		}
		
		private function onResize(evt:Event):void
		{
			
		}
		
	}
}